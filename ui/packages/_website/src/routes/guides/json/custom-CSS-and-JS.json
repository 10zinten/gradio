{"guide": {"name": "custom-CSS-and-JS", "category": "building-with-blocks", "pretty_category": "Building With Blocks", "guide_index": 4, "absolute_index": 11, "pretty_name": "Custom CSS And JS", "content": "# Custom JS and CSS\n\nThis guide covers how to style Blocks with more flexibility, as well as adding Javascript code to event listeners. \n\n## Custom CSS\n\nFor additional styling ability, you can pass any CSS to your app using the `css=` kwarg.\n\nThe base class for the Gradio app is `gradio-container`, so here's an example that changes the background color of the Gradio app:\n```python\nwith gr.Blocks(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```\n\nIf you'd like to reference external files in your css, preface the file path (which can be a relative or absolute path) with `\"file=\"`, for example:\n\n```python\nwith gr.Blocks(css=\".gradio-container {background-image: url('file=clouds.jpg')}\") as demo:\n    ...\n```\n\nYou can also pass the filepath to a CSS file to the `css` argument.\n\n## The `elem_id` Argument\n\nYou can `elem_id` to add an HTML element `id` to any component. This will allow you to select elements more easily with CSS.\n\n```python\nwith gr.Blocks(css=\"#warning {color: red}\") as demo:\n    box1 = gr.Textbox(value=\"Good Job\")\n    box2 = gr.Textbox(value=\"Failure\", elem_id=\"warning\")\n```\n\nThe CSS ruleset will only target the second Textbox here.\n\n## Custom JS\n\nEvent listeners have a `_js` argument that can take a Javascript function as a string and treat it just like a Python event listener function. You can pass both a Javascript function and a Python function (in which case the Javascript function is run first) or only Javascript (and set the Python `fn` to `None`). Take a look at the code below:\n\n```python\nimport gradio as gr\n\nblocks = gr.Blocks()\n\nwith blocks as demo:\n    subject = gr.Textbox(placeholder=\"subject\")\n    verb = gr.Radio([\"ate\", \"loved\", \"hated\"])\n    object = gr.Textbox(placeholder=\"object\")\n\n    with gr.Row():\n        btn = gr.Button(\"Create sentence.\")\n        reverse_btn = gr.Button(\"Reverse sentence.\")\n        foo_bar_btn = gr.Button(\"Foo bar.\")\n    \n    def sentence_maker(w1, w2, w3):\n        return f\"{w1} {w2} {w3}\"\n\n    output1 = gr.Textbox(label=\"output 1\")\n    output2 = gr.Textbox(label=\"verb\")\n    output3 = gr.Textbox(label=\"verb reversed\")\n\n    btn.click(sentence_maker, [subject, verb, object], output1)\n    reverse_btn.click(None, [subject, verb, object], output2, _js=\"(s, v, o) => o + ' ' + v + ' ' + s\")\n    verb.change(lambda x: x, verb, output3, _js=\"(x) => [...x].reverse().join('')\")\n    foo_bar_btn.click(None, [], subject, _js=\"(x) => x + ' foo'\")\n\ndemo.launch()\n```\n<gradio-app space='gradio/blocks_js_methods'></gradio-app>", "html": "<h1 id=\"custom-js-and-css\">Custom JS and CSS</h1>\n\n<p>This guide covers how to style Blocks with more flexibility, as well as adding Javascript code to event listeners. </p>\n\n<h2 id=\"custom-css\">Custom CSS</h2>\n\n<p>For additional styling ability, you can pass any CSS to your app using the <code>css=</code> kwarg.</p>\n\n<p>The base class for the Gradio app is <code>gradio-container</code>, so here's an example that changes the background color of the Gradio app:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n</code></pre></div>\n\n<p>If you'd like to reference external files in your css, preface the file path (which can be a relative or absolute path) with <code>\"file=\"</code>, for example:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks(css=\".gradio-container {background-image: url('file=clouds.jpg')}\") as demo:\n    ...\n</code></pre></div>\n\n<p>You can also pass the filepath to a CSS file to the <code>css</code> argument.</p>\n\n<h2 id=\"the-elem_id-argument\">The <code>elem_id</code> Argument</h2>\n\n<p>You can <code>elem_id</code> to add an HTML element <code>id</code> to any component. This will allow you to select elements more easily with CSS.</p>\n\n<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks(css=\"#warning {color: red}\") as demo:\n    box1 = gr.Textbox(value=\"Good Job\")\n    box2 = gr.Textbox(value=\"Failure\", elem_id=\"warning\")\n</code></pre></div>\n\n<p>The CSS ruleset will only target the second Textbox here.</p>\n\n<h2 id=\"custom-js\">Custom JS</h2>\n\n<p>Event listeners have a <code>_js</code> argument that can take a Javascript function as a string and treat it just like a Python event listener function. You can pass both a Javascript function and a Python function (in which case the Javascript function is run first) or only Javascript (and set the Python <code>fn</code> to <code>None</code>). Take a look at the code below:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>import gradio as gr\n\nblocks = gr.Blocks()\n\nwith blocks as demo:\n    subject = gr.Textbox(placeholder=\"subject\")\n    verb = gr.Radio([\"ate\", \"loved\", \"hated\"])\n    object = gr.Textbox(placeholder=\"object\")\n\n    with gr.Row():\n        btn = gr.Button(\"Create sentence.\")\n        reverse_btn = gr.Button(\"Reverse sentence.\")\n        foo_bar_btn = gr.Button(\"Foo bar.\")\n\n    def sentence_maker(w1, w2, w3):\n        return f\"{w1} {w2} {w3}\"\n\n    output1 = gr.Textbox(label=\"output 1\")\n    output2 = gr.Textbox(label=\"verb\")\n    output3 = gr.Textbox(label=\"verb reversed\")\n\n    btn.click(sentence_maker, [subject, verb, object], output1)\n    reverse_btn.click(None, [subject, verb, object], output2, _js=\"(s, v, o) => o + ' ' + v + ' ' + s\")\n    verb.change(lambda x: x, verb, output3, _js=\"(x) => [...x].reverse().join('')\")\n    foo_bar_btn.click(None, [], subject, _js=\"(x) => x + ' foo'\")\n\ndemo.launch()\n</code></pre></div>\n\n<p><gradio-app space='gradio/blocks<em>js</em>methods'></gradio-app></p>\n", "tags": [], "spaces": [], "url": "/guides/custom-CSS-and-JS/", "contributor": null}}